import { useEffect, useState, useRef } from "react";
import StarRating from "./StarRating";

const average = (arr) =>
  arr.reduce((acc, cur, i, arr) => acc + cur / arr.length, 0);

const KEY = "b12b0c4b"; /*We got it from omdb site API Keys*/

/*The whole App contains two components NavBar and Main*/
export default function App() {
  //const tempQuery = "inception";

  const [movies, setMovies] = useState([]); //state to handle display movies in MovieList

  const [isLoading, setIsLoading] =
    useState(
      false
    ); /*State to represent loading... when it takes time for loading*/
  const [error, setError] = useState(""); /*State to represent the error*/
  //state for a selected movie
  const [selectedId, setSelectedId] = useState(null);

  const [query, setQuery] = useState(""); //state for a value(query) entered in search bar

  /*State to handle watched movies. */
  //const [watched, setWatched] = useState([]);
  /*State to handle watched movies. it's written in another way by passing a function
   to store the values in the local storage*/
  const [watched, setWatched] = useState(function () {
    const storedValue = localStorage.getItem("watched");
    return JSON.parse(
      storedValue
    ); /*convert back the string to original type */
  }); /*State to handle watched movies &
   a pure function which returns value stored in localstorage 
   is passed as initial value of state.*/

  //function to handle selected movie
  function handleSelectMovie(id) {
    setSelectedId((selectedId) => (id === selectedId ? null : id));
  }

  //function to handle closing the movie
  function handleCloseMovie() {
    setSelectedId(null);
  }

  //function to add movies to watched list
  function handleAddWatched(movie) {
    setWatched((watched) => [...watched, movie]);

    //localStorage.setItem("watched", JSON.stringify([...watched, movie])); stores the values added to watched list into local storage.Another way to do this is using state variables and useEffect
  }

  //Function to handle deleting entries from watched list
  function handleDeleteWatched(id) {
    setWatched((watched) => watched.filter((movie) => movie.imdbID !== id));
  }

  /*useEffect function to handle side effects and to fetch and display contents based on dependency arrays*/
  useEffect(
    function () {
      const controller = new AbortController(); //browser API to handle race condition

      async function fetchMovies() {
        try {
          setIsLoading(
            true
          ); /*Initially set true to show that data is loading*/
          setError("");
          const res = await fetch(
            `http://www.omdbapi.com/?apikey=${KEY}&s=${query}`,
            { signal: controller.signal }
          );

          if (!res.ok)
            throw new Error("Something went wrong with fetching movies");
          const data = await res.json();

          if (data.Response === "False") throw new Error("Movie not found");

          setMovies(data.Search);
          setError("");
        } catch (err) {
          if (err.name !== "AbortError") {
            setError(err.message);
          }
        } finally {
          setIsLoading(
            false
          ); /*Have to change to false even the error occurs or data being fetched*/
        }
      }
      /*checking whether the search query has atleast 3 characters,if not returns immediately*/
      if (query.length < 3) {
        setMovies([]);
        setError("");
        return;
      }
      fetchMovies();

      //Clean up Function
      return function () {
        controller.abort();
      };
    },
    [query]
  );

  //Effect to handle storing movies added to watched list to the localstorage.
  useEffect(
    function () {
      localStorage.setItem("watched", JSON.stringify(watched));
    },
    [watched]
  );
  return (
    <>
      {/*<NavBar movies={movies} />; inorder to avoid prop drilling we use component composition by passing children instead of props*/}
      <NavBar>
        <Search query={query} setQuery={setQuery} />
        <NumResult movies={movies} />
      </NavBar>
      {/*<Main movies={movies}>
      inorder to avoid prop drilling we use component composition 
      by passing children instead of props */}
      <Main>
        {/*<ListBox movies={movies}/>
        inorder to avoid prop drilling
         we use component composition by passing children instead of props*/}
        {/*<ListBox> //Replace ListBox with reusable component Box
          <MovieList movies={movies} />
          //inorder to avoid prop drilling 
          we use component composition by passing children instead of props
        </ListBox>
        */}
        {/*<WatchedBox /> Replaced watchedBox with reusable component Box */}
        <Box>
          {/* <MovieList movies={movies} /> replaced by following conditional rendering*/}
          {isLoading && <Loader />}
          {/*if isLoading state is true display loader comp */}
          {!isLoading && !error && (
            <MovieList movies={movies} onSelectMovie={handleSelectMovie} />
          )}
          {/*if isLoading is not true and there is no error then display movie list */}
          {error && <ErrorMessage message={error} />}
          {/*if there is an error display that err msg */}
        </Box>
        <Box>
          {selectedId ? (
            <MovieDetails
              selectedId={selectedId}
              onCloseMovie={handleCloseMovie}
              onAddWatched={handleAddWatched}
              watched={watched}
            />
          ) : (
            <>
              <WatchedSummary watched={watched} />
              <WatchedMovieList
                watched={watched}
                onDeleteWatched={handleDeleteWatched}
              />
            </>
          )}
        </Box>
      </Main>
      ;
    </>
  );
}

function Loader() {
  return <p className="loader">Loading...</p>;
}
function ErrorMessage({ message }) {
  return (
    <p className="error">
      <span>‚ö°</span>
      {message}
    </p>
  );
}
/*NavBar contains 3major components Logo, Search and NumResult .
search and NumResults are passed as children*/
function NavBar({ children }) {
  return (
    <nav className="nav-bar">
      <Logo />

      {children}
    </nav>
  );
}
/*Component to display the logo in the NavBar*/
function Logo() {
  return (
    <div className="logo">
      <span role="img">üçø</span>
      <h1>usePopcorn</h1>
    </div>
  );
}

/*Component that displays the search bar in the NavBar*/
function Search({ query, setQuery }) {
  const inputEl = useRef(null);
  /* The useEffect to make the search bar focussed
  (cursor to be on search bar) when the app loads.
  This can be done using useRef also
  
  useEffect(function () {
    const el = document.querySelector(".search");
    el.focus();
  }, []);*/

  useEffect(
    function () {
      function callback(e) {
        if (document.activeElement === inputEl.current) return;
        if (e.code === "Enter") {
          inputEl.current.focus();
          setQuery("");
        }
      }
      document.addEventListener("keydown", callback);
      return () => document.addEventListener("keydown", callback);
    },
    [setQuery]
  );
  console.log(inputEl.current);
  return (
    <input
      className="search"
      type="text"
      placeholder="Search movies..."
      value={query}
      onChange={(e) => setQuery(e.target.value)}
      ref={inputEl}
    />
  );
}

/*Component that displays the results of the search*/
function NumResult({ movies }) {
  return (
    <p className="num-results">
      Found <strong>{movies.length}</strong> results
    </p>
  );
}

/*Main component contains 2 major components the ListBox which displays the movie list and the WatchedBox which displays watched movie list*/
function Main({ children }) {
  return <main className="main">{children}</main>;
}
/*ListBox & WatchedBox is doing the same thing only the name of states is different. So we can use one component for both named Box*/
function Box({ children }) {
  const [isOpen, setIsOpen1] = useState(true);
  return (
    <div className="box">
      <button
        className="btn-toggle"
        onClick={() => setIsOpen1((open) => !open)}
      >
        {isOpen ? "‚Äì" : "+"}
      </button>
      {isOpen && children}
    </div>
  );
}

/*ListBox contains a Button and depends on the status of button it displays the MovieList. MovieList is passed as children from where ListBox is called */
/*function ListBox({ children }) {
  const [isOpen1, setIsOpen1] = useState(true);
  return (
    <div className="box">
      <button
        className="btn-toggle"
        onClick={() => setIsOpen1((open) => !open)}
      >
        {isOpen1 ? "‚Äì" : "+"}
      </button>
      {isOpen1 && children}
    </div>
  );
}
*/

/*MovieList contains a component Movie which displays the list of movies*/
function MovieList({ movies, onSelectMovie }) {
  return (
    <ul className="list list-movies">
      {movies?.map((movie) => (
        <Movie movie={movie} key={movie.imdbID} onSelectMovie={onSelectMovie} />
      ))}
    </ul>
  );
}
function Movie({ movie, onSelectMovie }) {
  return (
    <li onClick={() => onSelectMovie(movie.imdbID)}>
      <img src={movie.Poster} alt={`${movie.Title} poster`} />
      <h3>{movie.Title}</h3>
      <div>
        <p>
          <span>üóì</span>
          <span>{movie.Year}</span>
        </p>
      </div>
    </li>
  );
}

/*WatchedBox is divided into 2 comps WatchedSummary & WatchedMovieList 
  function WatchedBox() {
  const [watched, setWatched] = useState(tempWatchedData);
  const [isOpen2, setIsOpen2] = useState(true);

  return (
    <div className="box">
      <button
        className="btn-toggle"
        onClick={() => setIsOpen2((open) => !open)}
      >
        {isOpen2 ? "‚Äì" : "+"}
      </button>
      {isOpen2 && (
        <>
          <WatchedSummary watched={watched} />
          <WatchedMovieList watched={watched} />
        </>
      )}
    </div>
  );
}
*/

function MovieDetails({ selectedId, onCloseMovie, onAddWatched, watched }) {
  const [movie, setMovie] = useState({});
  const [isLoading, setIsLoading] = useState(false);
  const [userRating, setUserRating] = useState("");
  const isWatched = watched.map((movie) => movie.imdbID).includes(selectedId);
  const watchedUserRating = watched.find(
    (movie) => movie.imdbID === selectedId
  )?.userRating;
  const {
    Title: title,
    Year: year,
    Poster: poster,
    Runtime: runtime,
    imdbRating,
    Plot: plot,
    Released: released,
    Actors: actors,
    Director: director,
    Genre: genre,
  } = movie;

  //Function to handle watched movie to the list
  function handleAdd() {
    const newWatchedMovie = {
      imdbID: selectedId,
      title,
      year,
      poster,
      imdbRating: Number(imdbRating),
      runtime: Number(runtime.split(" ").at(0)),
      userRating,
    };
    onAddWatched(newWatchedMovie);
    onCloseMovie();
  }

  useEffect(
    function () {
      function callback(e) {
        if (e.code === "Escape") {
          onCloseMovie();
        }
      }
      document.addEventListener("keydown", callback);

      return function () {
        document.removeEventListener("keydown", callback);
      };
    },
    [onCloseMovie]
  );

  //effect to handle the side effect when fetching data from API
  useEffect(
    function () {
      async function getMovieDetails() {
        setIsLoading(true);
        const res = await fetch(
          `http://www.omdbapi.com/?apikey=${KEY}&i=${selectedId}`
        );
        const data = await res.json();
        setMovie(data);
        setIsLoading(false);
      }
      getMovieDetails();
    },
    [selectedId]
  );

  //effect to handle title change which depends on external api
  useEffect(
    function () {
      if (!title) return;
      document.title = `Movie | ${title}`;

      //cleanUp function
      return function () {
        document.title = "usePopcorn";
      };
    },
    [title]
  );
  return (
    <div className="details">
      {isLoading ? (
        <Loader />
      ) : (
        <>
          <header>
            <button className="btn-back" onClick={onCloseMovie}>
              &larr;
            </button>
            <img src={poster} alt={`Poster of ${movie}`} />
            <div>
              <h2>{title}</h2>
              <p>
                {released}&bull;{runtime}
              </p>
              <p>{genre}</p>
              <p>
                <span>‚≠ê</span>
                {imdbRating} IMDb rating
              </p>
            </div>
          </header>
          <section>
            <div className="rating">
              {!isWatched ? (
                <>
                  <StarRating
                    maxRating={10}
                    size={24}
                    onSetRating={setUserRating}
                  />
                  {userRating > 0 && (
                    <button className="btn-add" onClick={handleAdd}>
                      + Add to list
                    </button>
                  )}
                </>
              ) : (
                <p>
                  You rated this movie with {watchedUserRating}
                  <span>‚≠ê</span>
                </p>
              )}
            </div>
            <p>
              <em>{plot}</em>
            </p>
            <p>Starring: {actors}</p>
            <p>Directed by: {director}</p>
          </section>
        </>
      )}
    </div>
  );
}

function WatchedSummary({ watched }) {
  const avgImdbRating = average(watched.map((movie) => movie.imdbRating));
  const avgUserRating = average(watched.map((movie) => movie.userRating));
  const avgRuntime = average(watched.map((movie) => movie.runtime));
  return (
    <div className="summary">
      <h2>Movies you watched</h2>
      <div>
        <p>
          <span>#Ô∏è‚É£</span>
          <span>{watched.length} movies</span>
        </p>
        <p>
          <span>‚≠êÔ∏è</span>
          <span>{avgImdbRating.toFixed(2)}</span>
        </p>
        <p>
          <span>üåü</span>
          <span>{avgUserRating.toFixed(2)}</span>
        </p>
        <p>
          <span>‚è≥</span>
          <span>{avgRuntime} min</span>
        </p>
      </div>
    </div>
  );
}

/*WatchedMovieList contains a component to display each movie in the list */
function WatchedMovieList({ watched, onDeleteWatched }) {
  return (
    <ul className="list">
      {watched.map((movie) => (
        <WatchedMovie
          movie={movie}
          key={movie.imdbID}
          onDeleteWatched={onDeleteWatched}
        />
      ))}
    </ul>
  );
}

/*Component to display each movie in the watched list */
function WatchedMovie({ movie, onDeleteWatched }) {
  return (
    <li>
      <img src={movie.poster} alt={`${movie.title} poster`} />
      <h3>{movie.title}</h3>
      <div>
        <p>
          <span>‚≠êÔ∏è</span>
          <span>{movie.imdbRating}</span>
        </p>
        <p>
          <span>üåü</span>
          <span>{movie.userRating}</span>
        </p>
        <p>
          <span>‚è≥</span>
          <span>{movie.runtime} min</span>
        </p>
        <button
          className="btn-delete"
          onClick={() => onDeleteWatched(movie.imdbID)}
        >
          {" "}
          X{" "}
        </button>
      </div>
    </li>
  );
}
